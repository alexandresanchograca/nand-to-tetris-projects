class Memory{
    static int free; //Heap base ptr
    static Array ram;
    static Array heap;
    static Array freeList;

    /* Setting up the freeList - Linked list for memory allocation */
    function void init(){
        let ram = 0;
        let heap = 2048; //heap base address
        let free = 2048;
        let heap[0] = 0; //Next node of the list
        let heap[1] = 14335; //Length of the block (The value)
        
        let freeList = 2048;
        let freeList[0] = 0; //Next node of the list
        let freeList[1] = 14335 - 1; //Length of the block (The value)
        return;
    }

    function int peek(int address){
        return ram[address];
    }

    function void poke(int address, int value){
        let ram[address] = value;
        return;
    }

    /* Gets the size of a object. Finds a empty block on the 
    virtual memory heap with this size. Allocates this object
    to the memory block available. Returns a pointer/reference to 
    this memory address.
    First Fit implementation, it's a greedy algorithm.*/
    function Array alloc(int size){
        var Array temp, nBlock, previousTemp;
        var int allocationSize;

        let allocationSize = size + 2;

        let previousTemp = heap;
        let temp = heap;
        while(~(temp[0] = 0)){

            if(temp[1] > allocationSize){
                let nBlock = (temp + temp[1]) - size;
                let temp[1] = temp[1] - allocationSize; //Updating memory block
                let nBlock[0] = 0;
                let nBlock[1] = size;
                return nBlock + 2;
            }

            let previousTemp = temp;
            let temp = temp[0];
        }

        if(temp[1] > (allocationSize)){
            let nBlock = (temp + temp[1]) - size;
            let temp[1] = temp[1] - allocationSize; //Updating memory block
            let nBlock[0] = 0;
            let nBlock[1] = size;
            return nBlock + 2;
        }

        return 0; //not found
    }

    function void append(Array heapReference){
        var Array temp;

        let temp = heap;
        while(~(temp[0] = 0)){ //Loop to the last element of the LL
            let temp = temp[0];
        }

        let temp[0] = heapReference;

        return;
    }


    /* Frees the block of memory and put it on the end of the
    linked list of heap memory segments (append) */
    function void deAlloc(Array obj){
       do Memory.append(obj - 2);
       return;
    }


}