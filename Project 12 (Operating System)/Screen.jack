// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */

class Screen{
    static int screenAddr;
    static boolean currentColor;
    static Array powerMod; //All the values of 2^k being k = {0, 1, ..., 15}

    /** Initializes the Screen. */
    function void init() {
        let screenAddr = 16384;
        let currentColor = true; //True is black

        //For drawing performance, we could also use Math.pow() each drawPixel but we know the finite value range
        let powerMod =  Math.getPowTwo();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while(i < 8192){
            do Memory.poke(i + 16384, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /* Draws a pixel on a x : 512 y: 256 screen
    * the memory map associated with this pixel
    * is confined to RAM memory space 16384 to 24575
    */
    function void drawPixel(int x, int y){
        var int pixelAddress, memValue, modValue;
        let pixelAddress = ((32 * y) + (x / 16)) + 16384;
        let memValue = Memory.peek(pixelAddress); 
        //We need to the the X % 16 calculation to get our bit drawing adress, ex: 450 % 16 = 2 = 2x2 = 0000000000000X00
        //In this case x & 15 will give us the power of 2 (k) on 2^k. After 2^k we will know the bit to modify
        //let modValue = Math.pow(2, x & 15); //Less performance alternative
        let modValue = powerMod[x & 15];

        if(~currentColor){
            do Memory.poke(pixelAddress, memValue & ~modValue);
            return;
        }

        do Memory.poke(pixelAddress, memValue | modValue); //Bitwise OR to not erase the previously drawn pixels
        return;
    }

    /* My implementation of draw line, the fNeg involves additional instructions
    which may not result in a super efficient implementation, but I found it was
    my personal first approach so I stuck with it for fun. An alternative to this
    would be to make an if/else statement that would be more efficient.
     */
    function void drawLine(int xStart, int yStart, int xEnd, int yEnd){
        var int x, y, dx, dy, temp;
        var int a, b;
        var int angleDiff, fNeg;

        if(xStart > xEnd){
            let temp = xStart;
            let xStart = xEnd;
            let xEnd = temp;
            let temp = yStart;
            let yStart = yEnd;
            let yEnd = temp;
        }

        if((yStart > yEnd) & (xStart = xEnd)){
            let temp = yStart;
            let yStart = yEnd;
            let yEnd = temp;
        }

        let x = xStart;
        let y = yStart;
        let dx = xEnd - xStart; //Delta of X value
        let dy = yEnd - yStart; //Delta of Y value
        let a = 0;
        let b = 0;
        let angleDiff = 0;

        let fNeg = 1;
        if(dy < 0){
            let fNeg = -1;
        }

        //We can check if the line horizontal or vertical and draw
        //using a different algorithm, checking if y1 equals y2 or x1 equals x2
        while((a < dx) | (b < dy)){
            do Screen.drawPixel(x + a, y + b);

            /*If the current angle is superior to the desired angle
            * we draw to the right to justify/correct the desired angle
            */
            if((angleDiff < 0) | (dx = 0) ){
                let b = b + (1 * fNeg);
                let angleDiff = angleDiff + dx;
            }else{ 
                let a = a + 1;
                let angleDiff = angleDiff - (dy * fNeg);
            }
        }
        return;
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, j, dx, dy;
        var int temp, firstAddr, lastAddr, firstVal, lastVal, leftMask, rightMask, mask;
        var int firstMemValue, lastMemValue;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let firstAddr = ((32 * y1) + (x1 / 16)) + 16384; 
        let lastAddr = ((32 * y1) + (x2 / 16)) + 16384;

        let leftMask = ~(powerMod[x1 & 15] - 1);
        let rightMask = powerMod[ (x2 & 15) + 1 ] - 1;

        while(~(y2 < y1)){ //While is 0 or more lines to draw
            if(firstAddr = lastAddr){ //Same 16 bit register
                let mask = leftMask & rightMask;
                let firstMemValue = Memory.peek(firstAddr);
                if(currentColor){
                    do Memory.poke(firstAddr, firstMemValue | mask);
                }else{
                    do Memory.poke(firstAddr, firstMemValue & ~mask);
                }
            }
            else{
                let firstMemValue = Memory.peek(firstAddr);
                let lastMemValue = Memory.peek(lastAddr);
                //Writing pixels of the first and last adresses on this y line
                if(currentColor){
                    do Memory.poke(firstAddr, firstMemValue | leftMask);
                    do Memory.poke(lastAddr, lastMemValue | rightMask);
                }
                else{
                    do Memory.poke(firstAddr, firstMemValue & ~leftMask);
                    do Memory.poke(lastAddr, lastMemValue & ~rightMask);
                }

                //Writing the pixels between first and last adresses
                if((lastAddr - firstAddr) > 1){
                    let temp = firstAddr + 1; //Getting next address
                    while(lastAddr > temp){
                        do Memory.poke(temp, currentColor);
                        let temp = temp + 1;
                    }
                }
            }

            //Going to the next line
            let firstAddr = firstAddr + 32;
            let lastAddr = lastAddr + 32;
            let y1 = y1 + 1;
        }
        return;
        /* 
        lets imagine our x1 and x2 is 0 to (16 + 14) = 30
         Solving for leftMask:
         0 & 15 = 0 & 1111 = 0000
         n = 2^0 = 1
         
         leftmask = not(n - 1) = not(1 - 1) = not(0) = (1111111111111111)base2
         We are going to fill all the bits to the right
         
         Solving for rightMask:
         30 & 15 = 11110 & 1111 = 1110 = 14
         n = 2^(14 + 1) = 32768

        rightmask = n - 1 = 32767 = (0111 1111 1111 1111)base2
        */
    }

    function void drawCircle(int xCenter, int yCenter, int r){
        var int dx, dy;

        //Overflow handler
        if(r > 181){
            return;
        }

        let dy = -r; //Entire circle is r + r

        //Loop
        while(dy < r){
            
            do Screen.drawLine(
                xCenter - Math.sqrt( ((r*r) - (dy*dy))),
                yCenter + dy,
                xCenter + Math.sqrt( ((r*r) - (dy*dy))),
                yCenter + dy
            );

            let dy = dy + 1;
        }
        return;
    }
}